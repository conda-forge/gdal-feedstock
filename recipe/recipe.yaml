schema_version: 1

context:
  version: 3.9.2

recipe:
  name: libgdal-core
  version: ${{ version }}

source:
  url: http://download.osgeo.org/gdal/${{ version }}/gdal-${{ version }}.tar.xz
  sha256: bfbcc9f087f012c36151c20c79f8eac9529e1e5298fbded79cd5a1365f0b113a

build:
  number: 1
  skip_compile_pyc:
    - share/bash-completion/completions/*.py
  ignore_run_exports_from:
    - kealib
    - openjpeg
    - tiledb
    - libnetcdf

outputs:
  - package:
      name: libgdal-core
  - package:
      name: libgdal-arrow-parquet
    build:
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - expat
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - libarrow
        - if: libarrow != 13
          then: libarrow-dataset
        - if: libarrow != 13
          then: libparquet
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/ogr_Arrow${SHLIB_EXT}
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/ogr_Parquet${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\ogr_Arrow.dll exit 1
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\ogr_Parquet.dll exit 1
          - gdalinfo --format Arrow
          - gdalinfo --format Parquet
    about:
      summary: Arrow and Parquet drivers for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-jp2openjpeg
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: JP2OpenJPEG
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_OPENJPEG=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - openjpeg
        - expat
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver JP2OpenJPEG for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-pdf
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: PDF
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_POPPLER=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - poppler
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
        - poppler
    tests:
      - files:
          recipe:
            - test_data
            - test_pdf.bat
            - test_pdf.sh
        script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
          - if: unix
            then: ./test_pdf.sh
          - if: win
            then: test_pdf.bat
    about:
      summary: Raster driver PDF for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-postgisraster
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: PostGISRaster
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_POSTGRESQL=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - libpq
        - postgresql
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
        - postgresql
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver PostGIS for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-pg
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: PG
          GDAL_PLUGIN_TYPE: ogr
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_POSTGRESQL=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - libpq
        - postgresql
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
        - postgresql
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
    about:
      summary: Vector driver PG for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-xls
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: XLS
          GDAL_PLUGIN_TYPE: ogr
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_FREEXL=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - freexl
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Vector driver XLS for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-fits
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: FITS
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_CFITSIO=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - cfitsio
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver FITS for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-grib
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: GRIB
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_LIBAEC=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - libaec
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver GRIB for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-kea
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: KEA
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_KEA=ON -DGDAL_USE_HDF5=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - ${{ pin_subpackage('libgdal-hdf5', exact=True) }}
        - libkml-devel
        - expat
        - kealib
        - hdf5
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
        - libgdal-hdf5 ${{ version }}.*
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver KEA for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-tiledb
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: TileDB
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_TILEDB=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - tiledb
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver TileDB for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-netcdf
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: netCDF
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_NETCDF=ON -DGDAL_USE_HDF5=ON -DGDAL_USE_HDF4=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - ${{ pin_subpackage('libgdal-hdf5', exact=True) }}
        - ${{ pin_subpackage('libgdal-hdf4', exact=True) }}
        - hdf5
        - hdf4
        - libkml-devel
        - expat
        - libnetcdf
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
        - libgdal-hdf5 ${{ version }}.*
        - libgdal-hdf4 ${{ version }}.*
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver netCDF for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-hdf5
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: HDF5
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_HDF5=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - hdf5
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver HDF5 for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal-hdf4
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: HDF4
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_HDF4=ON"
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - expat
        - hdf4
        - libaec
      run:
        - "libgdal-core >={{ \".\".join(version | split(\".\")[:2]) }}"
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver HDF4 for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT
    script:
      - if: unix
        then: build_plugin.sh
      - if: win
        then: build_plugin.bat
  - package:
      name: libgdal
    build:
    requirements:
      run:
        - libgdal-core ${{ version }}.*
        - libgdal-jp2openjpeg ${{ version }}.*
        - libgdal-pdf ${{ version }}.*
        - libgdal-postgisraster ${{ version }}.*
        - libgdal-pg ${{ version }}.*
        - libgdal-fits ${{ version }}.*
        - libgdal-xls ${{ version }}.*
        - libgdal-grib ${{ version }}.*
        - libgdal-kea ${{ version }}.*
        - libgdal-tiledb ${{ version }}.*
        - libgdal-netcdf ${{ version }}.*
        - libgdal-hdf5 ${{ version }}.*
        - libgdal-hdf4 ${{ version }}.*
      run_exports:
        - ${{ pin_subpackage('libgdal-core', upper_bound='x.x') }}
        - ${{ pin_subpackage('libgdal', upper_bound='x.x') }}
  - package:
      name: gdal
    build:
      skip_compile_pyc:
        - share/bash-completion/completions/*.py
      ignore_run_exports_from:
        - expat
    requirements:
      build:
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - cmake
        - if: unix
          then: make
        - if: win
          then: ninja
        - if: build_platform != target_platform
          then: python
        - if: build_platform != target_platform
          then: cross-python_${{ target_platform }}
        - if: build_platform != target_platform
          then: numpy
        - swig
      host:
        - python
        - pip
        - numpy
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libkml-devel
        - libxml2
        - expat
      run:
        - python
        - libgdal-core ${{ version }}.*
    tests:
      - python:
          imports:
            - osgeo
            - osgeo.ogr
            - osgeo.gdal
            - osgeo._gdal
            - osgeo._gdalconst
            - osgeo._ogr
            - osgeo._osr
          pip_check: false
      - about:
          summary: Python wrapper for the Geospatial Data Abstraction Library (GDAL)
          license: MIT
          license_file: LICENSE.TXT
        files:
          recipe:
            - test_data
            - extra_tests.py
            - test_python.py
            - test_script_exist.bat
        requirements:
          run:
            - libgdal
        script:
          - python test_python.py
          - gdal2tiles.py --help
          - gdal2xyz.py --help
          - gdal_calc.py --help
          - gdal_edit.py --help
          - gdal_fillnodata.py --help
          - gdal_merge.py --help
          - gdal_pansharpen.py --help
          - gdal_polygonize.py --help
          - gdal_proximity.py --help
          - gdal_retile.py --help
          - gdal_sieve.py --help
          - gdalattachpct.py --help
          - gdalcompare.py --help
          - gdalmove.py --help
          - pct2rgb.py --help
          - rgb2pct.py --help
          - ogrmerge.py --help
          - ogr_layer_algebra.py --help
          - gdal2tiles --help
          - gdal2xyz --help
          - gdal_calc --help
          - gdal_edit --help
          - gdal_fillnodata --help
          - gdal_merge --help
          - gdal_pansharpen --help
          - gdal_polygonize --help
          - gdal_proximity --help
          - gdal_retile --help
          - gdal_sieve --help
          - gdalattachpct --help
          - gdalcompare --help
          - gdalmove --help
          - pct2rgb --help
          - rgb2pct --help
          - ogrmerge --help
          - ogr_layer_algebra --help
    script:
      - if: unix
        then: install_python.sh
      - if: win
        then: install_python.bat

tests:
  - files:
      recipe:
        - test_data
        - run_test.bat
        - run_test.sh

about:
  license: MIT
  license_file: LICENSE.TXT
  summary: |
    GDAL is a translator library for raster and vector geospatial data formats that is released under an
    X/MIT style Open Source license by the Open Source Geospatial Foundation.


  homepage: http://www.gdal.org

extra:
  feedstock-name: gdal
  recipe-maintainers:
    - zklaus
    - akrherz
    - gillins
    - kmuehlbauer
    - mingwandroid
    - msarahan
    - ocefpaf
    - xylar

