schema_version: 1

context:
  version: 3.11.3

recipe:
  name: libgdal-core
  version: ${{ version }}

build:
  number: 4

cache:
  source:
    url: http://download.osgeo.org/gdal/${{ version }}/gdal-${{ version }}.tar.xz
    sha256: ba0807729fa681eed55bb6d5588bb9e4bde2b691c46e8d6d375ff5eaf789b16a
    patches:
      - if: osx
        then: 000_cmake.patch
  build:
    python:
      skip_pyc_compilation:
        - share/bash-completion/completions/*.py
    script:
      file: ${{ "build_core.sh" if unix else "build_core.bat" }}
  
  requirements:
    build:
      - cmake
      - if: not win
        then: pkg-config >=0.21
      - if: not win
        then: make
      - if: win
        then: ninja
      - ${{ compiler('c') }}
      - ${{ stdlib("c") }}
      - ${{ compiler('cxx') }}
      - swig
    host:
      - blosc
      - expat
      - geos
      # We use internal libtiff and libgeotiff for JXL-in-TIFF support
      # - geotiff
      - if: not win
        then: giflib
      - libjpeg-turbo
      - if: not win
        then: json-c
      - lerc
      - libarchive
      - libcurl
      - libdeflate
      - libiconv
      - libjxl
      - libkml-devel
      - liblzma-devel
      - libpng
      - libspatialite
      # We use internal libtiff and libgeotiff for JXL-in-TIFF support
      # - libtiff
      - libwebp-base
      - libxml2
      - lz4-c
      - muparser
      - openssl
      - pcre2
      - proj
      # qhull disabled because of https://github.com/conda-forge/qgis-feedstock/issues/284#issuecomment-1356490896
      # - qhull
      - setuptools
      - sqlite
      - xerces-c
      - zlib
      - zstd
      # For these plugins, we need the headers for the core sources
      - kealib
      - openjpeg
      - tiledb
      - libnetcdf
      - libheif
      - if: not win
        then: libadbc-driver-manager
    ignore_run_exports:
      from_package:
        - kealib
        - openjpeg
        - tiledb
        - libnetcdf
        - libheif
        - if: not win
          then: libadbc-driver-manager

outputs:
  - package:
      name: libgdal-core
    requirements:
      run_exports:
        - ${{ pin_subpackage('libgdal-core', upper_bound='x.x') }}
      run_constraints:
        - libgdal ${{ version }}.*
    tests:
      - files:
          recipe:
            - test_data
            - run_test.bat
            - run_test.sh
        script:
          - if: unix
            then: bash run_test.sh
          - if: win
            then: call run_test.bat

  - package:
      name: libgdal-core-devel
    requirements:
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - expat
        - libkml-devel
        - liblzma-devel

  - package:
      name: libgdal-arrow-parquet
    build:
      script:
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - libarrow
        - if: libarrow != 13
          then: libarrow-dataset
        - if: libarrow != 13
          then: libparquet
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/ogr_Arrow${SHLIB_EXT}
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/ogr_Parquet${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\ogr_Arrow.dll exit 1
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\ogr_Parquet.dll exit 1
          - gdalinfo --format Arrow
          - gdalinfo --format Parquet
    about:
      summary: Arrow and Parquet drivers for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-jp2openjpeg
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: JP2OpenJPEG
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_OPENJPEG=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - openjpeg
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver JP2OpenJPEG for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-pdf
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: PDF
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_POPPLER=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - poppler
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - files:
          recipe:
            - test_data
            - test_pdf.bat
            - test_pdf.sh
        script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
          - if: unix
            then: ./test_pdf.sh
          - if: win
            then: test_pdf.bat
    about:
      summary: Raster driver PDF for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-postgisraster
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: PostGISRaster
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_POSTGRESQL=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - libpq
        - postgresql
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - postgresql
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver PostGIS for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-pg
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: PG
          GDAL_PLUGIN_TYPE: ogr
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_POSTGRESQL=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - libpq
        - postgresql
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - postgresql
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
    about:
      summary: Vector driver PG for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-xls
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: XLS
          GDAL_PLUGIN_TYPE: ogr
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_FREEXL=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - freexl
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Vector driver XLS for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-fits
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: FITS
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_CFITSIO=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - cfitsio
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver FITS for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-grib
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: GRIB
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_LIBAEC=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - libaec
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver GRIB for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-kea
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: KEA
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_KEA=ON -DGDAL_USE_HDF5=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - ${{ pin_subpackage('libgdal-hdf5', exact=True) }}
        - kealib
        - hdf5
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libgdal-hdf5 ${{ version }}.*
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver KEA for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-tiledb
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: TileDB
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_TILEDB=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - tiledb
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver TileDB for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-netcdf
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: netCDF
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_NETCDF=ON -DGDAL_USE_HDF5=ON -DGDAL_USE_HDF4=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - ${{ pin_subpackage('libgdal-hdf5', exact=True) }}
        - ${{ pin_subpackage('libgdal-hdf4', exact=True) }}
        - hdf5
        - hdf4
        - libnetcdf
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
        - libgdal-hdf5 ${{ version }}.*
        - libgdal-hdf4 ${{ version }}.*
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver netCDF for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-hdf5
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: HDF5
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_HDF5=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - hdf5
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver HDF5 for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-hdf4
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: HDF4
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_HDF4=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - hdf4
        - libaec
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver HDF4 for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal
    requirements:
      run:
        - libgdal-core ${{ version }}.*
        - libgdal-jp2openjpeg ${{ version }}.*
        - libgdal-pdf ${{ version }}.*
        - libgdal-postgisraster ${{ version }}.*
        - libgdal-pg ${{ version }}.*
        - libgdal-fits ${{ version }}.*
        - libgdal-xls ${{ version }}.*
        - libgdal-grib ${{ version }}.*
        - libgdal-kea ${{ version }}.*
        - libgdal-tiledb ${{ version }}.*
        - libgdal-netcdf ${{ version }}.*
        - libgdal-hdf5 ${{ version }}.*
        - libgdal-hdf4 ${{ version }}.*
        - if: not win
          then: libgdal-adbc ${{ version }}.*
      run_exports:
        - ${{ pin_subpackage('libgdal-core', upper_bound='x.x') }}
        - ${{ pin_subpackage('libgdal', upper_bound='x.x') }}

  - package:
      name: gdal
    build:
      python:
        skip_pyc_compilation:
          - share/bash-completion/completions/*.py
      script:
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - cmake
        - if: unix
          then: make
        - if: win
          then: ninja
        - if: build_platform != target_platform
          then: python
        - if: build_platform != target_platform
          then: cross-python_${{ target_platform }}
        - if: build_platform != target_platform
          then: numpy
        - swig
      host:
        - python
        - pip
        - numpy
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - setuptools
      run:
        - python
        - libgdal-core ${{ version }}.*
    tests:
      - python:
          imports:
            - osgeo
            - osgeo.ogr
            - osgeo.gdal
            - osgeo._gdal
            - osgeo._gdalconst
            - osgeo._ogr
            - osgeo._osr
          pip_check: false
      - files:
          recipe:
            - test_data
            - extra_tests.py
            - test_python.py
            - test_script_exist.bat
        requirements:
          run:
            - libgdal
        script:
          - python test_python.py
          - if: not win
            then: "PYTHONWARNINGS=\"error\" python -c \"import osgeo; print(osgeo.__version__)\""
          - gdal2tiles.py --help
          - gdal2xyz.py --help
          - gdal_calc.py --help
          - gdal_edit.py --help
          - gdal_fillnodata.py --help
          - gdal_merge.py --help
          - gdal_pansharpen.py --help
          - gdal_polygonize.py --help
          - gdal_proximity.py --help
          - gdal_retile.py --help
          - gdal_sieve.py --help
          - gdalattachpct.py --help
          - gdalcompare.py --help
          - gdalmove.py --help
          - pct2rgb.py --help
          - rgb2pct.py --help
          - ogrmerge.py --help
          - ogr_layer_algebra.py --help
          - gdal2tiles --help
          - gdal2xyz --help
          - gdal_calc --help
          - gdal_edit --help
          - gdal_fillnodata --help
          - gdal_merge --help
          - gdal_pansharpen --help
          - gdal_polygonize --help
          - gdal_proximity --help
          - gdal_retile --help
          - gdal_sieve --help
          - gdalattachpct --help
          - gdalcompare --help
          - gdalmove --help
          - pct2rgb --help
          - rgb2pct --help
          - ogrmerge --help
          - ogr_layer_algebra --help
    about:
      summary: Python wrapper for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-adbc
    build:
      # FIXME: libadbc-driver-manager is not available currently on Windows
      skip:
        - win
      script:
        env:
          GDAL_PLUGIN_NAME: ADBC
          GDAL_PLUGIN_TYPE: ogr
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_ADBCDRIVERMANAGER=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - libadbc-driver-manager
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: ogrinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: ogrinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Vector driver ADBC for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-avif
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: AVIF
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_AVIF=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - libavif
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver AVIF for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

  - package:
      name: libgdal-heif
    build:
      script:
        env:
          GDAL_PLUGIN_NAME: HEIF
          GDAL_PLUGIN_TYPE: gdal
          GDAL_PLUGIN_DEPS: "-DGDAL_USE_HEIF=ON"
        file: ${{ "build_plugin.sh" if unix else "build_plugin.bat" }}
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: pkg-config
        - if: unix
          then: make
        - if: win
          then: ninja
      host:
        - ${{ pin_subpackage('libgdal-core-devel', exact=True) }}
        - libheif
      run:
        - ${{ pin_subpackage('libgdal-core', exact=True) }}
    tests:
      - script:
          - if: unix
            then: test -f ${PREFIX}/lib/gdalplugins/${GDAL_PLUGIN_TYPE}_${GDAL_PLUGIN_NAME}${SHLIB_EXT}
          - if: win
            then: if not exist %LIBRARY_LIB%\gdalplugins\%GDAL_PLUGIN_TYPE%_%GDAL_PLUGIN_NAME%.dll exit 1
          - if: unix
            then: gdalinfo --format ${GDAL_PLUGIN_NAME}
          - if: win
            then: gdalinfo --format %GDAL_PLUGIN_NAME%
    about:
      summary: Raster driver HEIF for the Geospatial Data Abstraction Library (GDAL)
      license: MIT
      license_file: LICENSE.TXT

about:
  license: MIT
  license_file:
    - LICENSE.TXT
    - LICENSE_libtiff.txt
    - LICENSE_libgeotiff.txt
  summary: |
    GDAL is a translator library for raster and vector geospatial data formats that is released under an
    X/MIT style Open Source license by the Open Source Geospatial Foundation.


  homepage: http://www.gdal.org

extra:
  feedstock-name: gdal
  recipe-maintainers:
    - rouault
    - zklaus
    - akrherz
    - gillins
    - kmuehlbauer
    - mingwandroid
    - msarahan
    - ocefpaf
    - xylar
